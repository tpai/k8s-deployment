apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: internal-nginx-ingress
  namespace: ${K8S_NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Xss-Protection: 1";
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecDebugLog /tmp/modsec_debug.log
    nginx.ingress.kubernetes.io/whitelist-source-range: "${WHITELIST_IP}"
spec:
  ingressClassName: ${K8S_NAMESPACE}-internal-nginx
  tls:
    - hosts:
        - ${HOST_NAME}
      secretName: https-secret
  rules:
    - http:
        paths:
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: internal-ingress-nginx-controller
                port:
                  number: 10254
    - host: ${HOST_NAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: https-echo
                port:
                  number: 8080
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  name: internal-ingress-nginx
  namespace: ${K8S_NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  name: internal-ingress-nginx
  namespace: ${K8S_NAMESPACE}
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resourceNames:
  - internal-ingress-controller-leader
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - internal-ingress-controller-leader
  resources:
  - leases
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  name: internal-ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  name: internal-ingress-nginx
  namespace: ${K8S_NAMESPACE}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: internal-ingress-nginx
subjects:
- kind: ServiceAccount
  name: internal-ingress-nginx
  namespace: ${K8S_NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  name: internal-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: internal-ingress-nginx
subjects:
- kind: ServiceAccount
  name: internal-ingress-nginx
  namespace: ${K8S_NAMESPACE}
---
apiVersion: v1
data:
  allow-snippet-annotations: "true"
  hsts-max-age: "63072000"
  limit-conn-status-code: "429"
  limit-connections: "100"
  limit-req-status-code: "429"
  limit-rps: "100"
  proxy-read-timeout: "120"
  proxy-body-size: "30m"
  use-http2: "true"
  # retrieve real client ip and exclude proxy ip
  enable-real-ip: "true"
  use-forwarded-headers: "true"
  use-proxy-protocol: "true"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  name: internal-ingress-nginx-controller
  namespace: ${K8S_NAMESPACE}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    ### retrieve real client ip in linode
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    service.beta.kubernetes.io/linode-loadbalancer-proxy-protocol: "v2"
    ### place lb into subnet
    # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    # service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "backend-lb-subnet"
  name: internal-ingress-nginx-controller
  namespace: ${K8S_NAMESPACE}
spec:
  externalTrafficPolicy: Local
  ports:
  - appProtocol: http
    name: http
    port: 80
    protocol: TCP
    targetPort: http
  - appProtocol: https
    name: https
    port: 443
    protocol: TCP
    targetPort: https
  - name: prometheus
    port: 10254
    targetPort: prometheus
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  name: internal-ingress-nginx-controller
  namespace: ${K8S_NAMESPACE}
spec:
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: internal-ingress-nginx
      app.kubernetes.io/name: internal-ingress-nginx
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: internal-ingress-nginx
        app.kubernetes.io/name: internal-ingress-nginx
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --publish-service=$(POD_NAMESPACE)/internal-ingress-nginx-controller
        - --election-id=internal-ingress-controller-leader
        - --controller-class=k8s.io/internal-ingress-nginx
        - --ingress-class=k8s.io/internal-nginx
        - --configmap=$(POD_NAMESPACE)/internal-ingress-nginx-controller
        - --default-ssl-certificate=$(POD_NAMESPACE)/https-secret
        - --watch-namespace=$(POD_NAMESPACE)
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        image: registry.k8s.io/ingress-nginx/controller:v1.3.0@sha256:d1707ca76d3b044ab8a28277a2466a02100ee9f58a86af1535a3edf9323ea1b5
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: controller
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 10254
          name: prometheus
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 90Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 101
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: internal-ingress-nginx
      terminationGracePeriodSeconds: 300
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: internal-ingress-nginx
    app.kubernetes.io/name: internal-ingress-nginx
    app.kubernetes.io/part-of: internal-ingress-nginx
    app.kubernetes.io/version: 1.3.0
  name: ${K8S_NAMESPACE}-internal-nginx
spec:
  controller: k8s.io/internal-ingress-nginx
